// Component - Interface comum
public interface Carro {
	
	void caracterizaCarro();
}

####################

// ConcreteComponent
public class CarroConcreto implements Carro{

	@Override
	public void caracterizaCarro() {
	       System.out.println("Este é um carro básico.");	
	}
}

####################

// Decorator base
public class DecoradorBaseCarro implements Carro{

	public Carro carro;	
	
	public DecoradorBaseCarro(Carro carro) {
		this.carro = carro;
	}

	@Override
    	public void caracterizaCarro() {
        	carro.caracterizaCarro();
    	}
}  

#######################

// Concrete Decorator
public class DecoradorConcretoCarroAdicionaTetoSolar extends DecoradorBaseCarro{

	public DecoradorConcretoCarroAdicionaTetoSolar(Carro carro) {
		super(carro);
	}

	@Override
	public void caracterizaCarro() { // Código extra que decora o objeto
		super.caracterizaCarro();
		System.out.println("Parabéns por adicionar teto solar no seu carro!");
	}
}

##################

// Concrete Decorator
public class DecoradorConcretoCarroAdicionaIA extends DecoradorBaseCarro{

	public DecoradorConcretoCarroAdicionaIA(Carro carro) {
	       super(carro);
	}

	@Override
	public void caracterizaCarro() { // Código extra que decora o objeto
		super.caracterizaCarro();
		System.out.println("Parabéns por adicionar IA no seu carro!");
	}
}

#################

// Cliente
public class Cliente {
	
	public static void main(String[] args) {

        // Carro básico
        Carro carroBasico = new CarroConcreto();

        // Decorado com teto solar
        Carro carroComTetoSolar = new DecoradorConcretoCarroAdicionaTetoSolar(carroBasico);
        carroComTetoSolar.caracterizaCarro();

        System.out.println("--------");

        // Decorado com IA e depois com teto solar
        Carro carroComposto = new DecoradorConcretoCarroAdicionaTetoSolar(
                                  new DecoradorConcretoCarroAdicionaIA(
                                      new CarroConcreto()
                                  ));
        carroComposto.caracterizaCarro();
    }
}  

Participantes do padrão:

| Participante                    | Classe                                                               |
| ------------------------------- | -------------------------------------------------------------------- |
| **Component (interface comum)** | `Carro`                                                              |
| **ConcreteComponent**           | `CarroConcreto`                                                      |
| **Decorator (abstrato/base)**   | `DecoradorBaseCarro`                                                 |
| **ConcreteDecorator**           | `DecoradorConcretoCarroAutomatico`, `DecoradorConcretoCarroSemiAuto` |
| **Client**                      | `Cliente`                                                            |


