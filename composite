// Component - interface comum para folhas e composites
public interface SistemaArquivos {

	 void mostrar();
}

##################

// Leaf
public class Arquivo implements SistemaArquivos{

	private String nome;	
	
	public Arquivo(String nome) {
		this.nome = nome;
	}

	@Override
	public void mostrar() {
        	System.out.println("Arquivo: " + nome);
    	}
}

##################

import java.util.ArrayList;
import java.util.List;

// Composite
public class Pasta implements SistemaArquivos{
	
	private String nome;
  	private List<SistemaArquivos> listaDeObjetos = new ArrayList<>();
    
	public Pasta(String nome) {
		this.nome = nome;
	}
    
	public void add(SistemaArquivos arquivoOuPasta) {
		listaDeObjetos.add(arquivoOuPasta);
  	}

  	public void remove(SistemaArquivos arquivoOuPasta) {
    		listaDeObjetos.remove(arquivoOuPasta);
  	}

	@Override
	public void mostrar() {
		System.out.println("Pasta: " + nome);
	        for (SistemaArquivos arquivoOuPasta : listaDeObjetos) {
	        	arquivoOuPasta.mostrar(); // chamada recursiva
	        }		
	}
}

######################

// Cliente
public class Cliente {

	public static void main(String[] args) {
		 	
		Arquivo arquivo1 = new Arquivo("documento.txt");
		Arquivo arquivo2 = new Arquivo("foto.jpg");

	        Pasta pasta1 = new Pasta("Documentos");
	        pasta1.add(arquivo1);

	        Pasta pasta2 = new Pasta("Imagens");
	        pasta2.add(arquivo2);

	        Pasta raiz = new Pasta("Raiz");
	        raiz.add(pasta1);
	        raiz.add(pasta2);

	        raiz.mostrar();
	        
	        /* Sa√≠da esperada:
	           Pasta: Raiz
		   Pasta: Documentos
		   Arquivo: documento.txt
		   Pasta: Imagens
		   Arquivo: foto.jpg 		         
	         */
	}
}
